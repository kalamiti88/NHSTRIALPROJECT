
public class BrowserUtils {
    public static void selectBy(WebElement locationBox, String value, String methodName) {

        Select select = new Select(locationBox);

        switch (methodName) {

            case "text":

                select.selectByVisibleText(value);

                break;


            case "value":

                select.selectByValue(value);
                break;

            case "index":

                select.selectByIndex(Integer.parseInt(value));//why did we pars?

                break;

            default:

                System.out.println("Method os not available , Use text, value or index");


        }
    }

    public static String getText(WebElement element) {

        return element.getText().trim();
    }

    public static String getTitleWithJS(WebDriver driver) {
        JavascriptExecutor js = (JavascriptExecutor) driver;
        return js.executeScript("return document.title").toString();
    }

    public static void clickWithJS(WebDriver driver, WebElement element) {

        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].click()", element);
    }

    public static void scrollIntoView(WebDriver driver, WebElement element) {
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView(true)", element);


    }

    public static void switchByID(WebDriver driver) {

        String mainPageId = driver.getWindowHandle();
        Set<String> allPagesId = driver.getWindowHandles();
        for (String id : allPagesId) {
            if (!id.equals(mainPageId)) {//if the ID is not equal to mainPageID switch to new Page
                driver.switchTo().window(id);
            }
        }
    }

    public static void switchByTitle(WebDriver driver, String title) {//most reliable one

        Set<String> allPagesID = driver.getWindowHandles();
        for (String id : allPagesID) {
            driver.switchTo().window(id);
            if (driver.getTitle().contains(title)) {
                break;
            }
        }


    }

    public static void getScreenShot(WebDriver driver, String packageName) {

        File file = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

        String location = System.getProperty("user.dir" + "/src/java/screenshot" + packageName + "/");

        try {

            FileUtils.copyFile(file, new File(location + System.currentTimeMillis()));

        } catch (IOException e) {

            throw new RuntimeException(e);
        }
    }

    public static void getScreenShotForCucumber(WebDriver driver, Scenario scenario) {
        Date currentDate = new Date();
        String screenShotFileName = currentDate.toString().replace(" ", "-").replace(":", "-");
        if (scenario.isFailed()) {
            File screenShotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            try {
                FileUtils.copyFile(screenShotFile, new File("src/test/java/screenshot/" + screenShotFileName + ".png"));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
}


